// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  WRITER
  MARKETING
  USER
}

model Setting {
  id            String          @id @default(cuid())
  name          String
  logo          String
  title         String
  description   String
  
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role @default(USER)
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])

  @@map("account")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])

  @@map("session")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])

  @@map("verification_token")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])

  @@map("authenticator")
}

model CategoryService {
  id            String @id @default(cuid())
  name          String
  slug          String @unique
  image         String
  body          String
  services      Service[]

  @@map("category_services")
}

model Service {
  id            String @id @default(cuid())
  title         String
  slug          String @unique
  image         String
  body          String
  category_service_id   String
  category_services    CategoryService @relation(fields: [category_service_id], references: [id])

  @@map("services")
}

model Page {
  id            String @id @default(cuid())
  title         String
  slug          String @unique
  image         String
  body          String

  @@map("pages")
}

model Category {
  id            String @id @default(cuid())
  name          String
  slug          String @unique
  image         String
  body          String
  articles      Article[]

  @@map("categories")
}

model Article {
  id            String @id @default(cuid())
  title         String
  slug          String @unique
  image         String
  body          String
  categories    Category[]

  @@map("articles")
}

enum ObjectType {
  PAGE
  SERVICE
  ARTICLE
}

model Seo {
  id                    String @id @default(cuid())
  object_type           ObjectType @default(SERVICE)
  object_id             String?
  title                 String?
  description           String?
  author                String?
  keywords              String?
  breadcrumb            String?
  canonical             String?
  keywordScore          String?
  readabilityScore      String?
  isCornerstone         Boolean @default(false)
  isNoindex             Boolean @default(false)
  isNofollow            Boolean @default(false)
  isNoarchive           Boolean @default(false)
  isNoimageindex        Boolean @default(false)
  isNosnippet           Boolean @default(false)
  twitterTitle          String?
  twitterDescription    String?
  twitterImage          String?
  openGraphTitle        String?
  openGraphDescription  String?
  openGraphImage        String?
  openGraphImageMeta    String?
  linksCount            Int?
  incomingLinkCount     Int?
  language              String?
  region                String?
  schemaPageType        String?
  SchemaArticleType     String?
  
  @@map("seo")
}